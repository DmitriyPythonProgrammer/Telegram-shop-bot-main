import datetime
from aiogram import types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, LabeledPrice
from Framework.Filters import IsNotCancel, IsNotBanned
from Domain.order_functions import send_suggestion, send_order, send_question
from bot_config import PAYMENT_TOKEN
from ports.db import *
from ports.db import add_data, get_data, update_data, clear_data, \
    add_pay_method, get_product_name, get_product_id, get_setting, update_setting
from Domain.functions import is_available, change_available, print_products, product_to_data, update_price, not_limit, \
    is_only_online
from Application.markups import order_markup, basket_markup, pick_method_markup, buy_markup, pay_method, cash_markup
from Application.create_bot import dp, bot
from Application.markups.markups import main_menu_f, cancel_markup, buy_or_arend_markup
from .states import *
import Application.admin
import Application.Configs


@dp.message(Command("start"))
async def begin(message: types.Message, state: FSMContext) -> None:
    first_start = (await get_setting("first_start"))
    await state.clear()
    if first_start == '1' and message.from_user.id == ADMIN_ID:
        await bot.send_message(message.chat.id, "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –≤–∞—Å —Å –ø–æ–∫—É–ø–∫–æ–π —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞-–º–∞–≥–∞–∑–∏–Ω–∞ –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞! üéâ"
                                                "\n –ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –ø—Ä–æ–¥–∞–∂, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞:\n"
                                                "1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –º–∞–≥–∞–∑–∏–Ω - –¥–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã, –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É '–í –Ω–∞–ª–∏—á–∏–∏'\n"
                                                "2. –ò–∑–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞ —Å–≤–æ–π\n"
                                                "3. –ò–∑–º–µ–Ω–∏—Ç–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Ñ–æ—Ç–æ –Ω–∞ —Å–≤–æ–∏.\n"
                                                "4. –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –∏ –∏–∑–º–µ–Ω–∏—Ç–µ –¥—Ä—É–≥–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥ —Å–µ–±—è.")
        await update_setting("first_start", "0")
        first_start = '0'
    user_info = await bot.get_chat_member(message.chat.id, message.from_user.id)
    name = user_info.user.username
    await add_user(name, user_info.user.id, str(datetime.date.today()))
    await add_data(user_info.user.id)
    start_mes = (await get_setting("start_mes"))
    start_photo = (await get_setting("start_photo"))
    if start_photo != "":
        await bot.send_photo(chat_id=message.chat.id, photo=start_photo, reply_markup=(await main_menu_f(message)))
    if start_mes != "":
        await bot.send_message(message.chat.id, start_mes, reply_markup=(await main_menu_f(message)))
    if start_mes == '' and start_photo == '':
        await bot.send_message(message.chat.id,
                               '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç-–º–∞–≥–∞–∑–∏–Ω –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –∏–∑–º–µ–Ω–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö!',
                               reply_markup=(await main_menu_f(message)))


@dp.message(F.text == "üóë –ö–æ—Ä–∑–∏–Ω–∞", IsNotBanned())
async def basket_show(message: types.Message, state: FSMContext) -> None:
    data = (await get_data(message.from_user.id))
    if data == False:
        await bot.send_message(message.from_user.id, "üìõ –û—à–∏–±–∫–∞! üìõ\n–ö–∞–∂–µ—Ç—Å—è, –±–æ—Ç –ø–æ—Ç–µ—Ä—è–ª –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ. –î–ª—è –∏—Ö –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ '/start'")
        await state.clear()
        return
    games = '' #data[2][–Ω–∞–∑–≤–∞–Ω–∏–µ, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, (0-–ø–æ–∫—É–ø–∫–∞, 1 - –∞—Ä–µ–Ω–¥–∞, 2 - —Ü–∏—Ñ—Ä–æ–≤–æ–π —Ç–æ–≤–∞—Ä), –æ–±—â–∞—è —Å—É–º–º–∞ –∑–∞ —Ç–æ–≤–∞—Ä]
    if data[2]:
        for i in range(len(data[2])):
            if data[2][i][2] == '1':
                games+=f'ü•è {data[2][i][0]} - üìÖ {data[2][i][1]} –¥–Ω–µ–π ({data[2][i][3]}üíµ)\n'
            if data[2][i][2] == '0' or data[2][i][2] == '2':
                games += f'ü•è {data[2][i][0]} '
                if int(data[2][i][1])>1:
                    games += f'- {data[2][i][1]} —à—Ç—É–∫ '
                games += f'({data[2][i][3]}üíµ)'
                games += '\n'
        await bot.send_message(message.chat.id, "<b>üóë –ö–æ—Ä–∑–∏–Ω–∞: </b>\n\n{games}\n\n<b>–°—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏:</b> {price}üí∞\n\n<b>–°—É–º–º–∞ –∞—Ä–µ–Ω–¥—ã:</b> {rent}üí∞\n\n<b>–°—É–º–º–∞ –∑–∞–ª–æ–≥–∞:</b> {deposit_price}üí∞\n\n<b>–û–±—â–∞—è —Å—É–º–º–∞:</b> {final_price}üí∞ ".format(games=games, rent=data[3], final_price=data[5], deposit_price=data[4], price=data[7]),
                        parse_mode="html", reply_markup=basket_markup)
    else:
        await bot.send_message(message.chat.id, "üï∏ –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")


@dp.message(F.text == "üõí –ú–∞–≥–∞–∑–∏–Ω")
async def choose_game(message: types.Message, state: FSMContext) -> None:
    limit = int((await get_setting("limit_displayed_products")))
    data = (await get_data(message.from_user.id))
    if data == False:
        await bot.send_message(message.from_user.id, "üìõ –û—à–∏–±–∫–∞! üìõ\n–ö–∞–∂–µ—Ç—Å—è, –±–æ—Ç –ø–æ—Ç–µ—Ä—è–ª –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ. –î–ª—è –∏—Ö –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ '/start'")
        await state.clear()
        return 0
    data[6] = 0
    data[1] = limit
    check = (await checker())

    if check is not None:
        await bot.send_message(message.chat.id, "üõí –¢–æ–≤–∞—Ä—ã –≤ –Ω–∞–ª–∏—á–∏–∏:", reply_markup=order_markup)
        await print_products(message.from_user.id, data[6], limit, data[1])
        data[6] += limit
        data[1] += limit
    else:
        await bot.send_message(message.chat.id, "–í –Ω–∞–ª–∏—á–∏–∏ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç üò≠")
    await state.set_state(Shop.choose)
    await update_data(data)


@dp.message(F.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def main_menu(message: types.Message, state: FSMContext) -> None:
    await state.clear()
    await bot.send_message(message.chat.id, "<b>–í—ã –≤—ã—à–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>", parse_mode="html", reply_markup=(await main_menu_f(message)))


@dp.message(F.text == "üåÄ –û –Ω–∞—Å")
async def about_us(message: types.Message) -> None:
    text = (await get_setting("mess_about_us"))
    await bot.send_message(message.chat.id, text, parse_mode="html")


@dp.message(F.text == "‚≠êÔ∏è FAQ")
async def faq(message: types.Message) -> None:
    text = (await get_setting("mess_faq"))
    await bot.send_message(message.chat.id, text, parse_mode="html")


@dp.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel(message: types.Message, state: FSMContext) -> None:
    await state.clear()
    await bot.send_message(message.chat.id, "‚ùó –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ ‚ùó", reply_markup=(await main_menu_f(message)), parse_mode="html")


@dp.message(F.text == "üñå –°–ø—Ä–æ—Å–∏—Ç—å", IsNotBanned())
async def ask(message: types.Message, state: FSMContext) -> None:
    if not (await not_limit(message.from_user.id, 'question')):
        await bot.send_message(message.from_user.id, "‚ùå –û—à–∏–±–∫–∞, –≤—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç –∫–æ–ª-–≤–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å!", reply_markup=(await main_menu_f(message)))
        return
    await state.set_state(Ask.question)
    await bot.send_message(message.chat.id, "üìã –í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Ç–º–µ–Ω–∞'", reply_markup=cancel_markup, parse_mode="html")


@dp.message(F.text == "‚úÇÔ∏è –£–±—Ä–∞—Ç—å –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã", IsNotBanned())
async def remove_product(message: types.Message, state: FSMContext) -> None:
    data = (await get_data(message.from_user.id))
    if data == False:
        await bot.send_message(message.from_user.id, "üìõ –û—à–∏–±–∫–∞! üìõ\n–ö–∞–∂–µ—Ç—Å—è, –±–æ—Ç –ø–æ—Ç–µ—Ä—è–ª –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ. –î–ª—è –∏—Ö –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ '/start'")
        await state.clear()
        return
    rem_day = []
    for item in data[2]:
        product_id = (await get_product_id(item[0]))
        if item[2] == '0' or item[2] == '2':
            rem_day_button = InlineKeyboardButton(text=f"–£–±—Ä–∞—Ç—å –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–∫—É–ø–∫—É '{item[0]}'", callback_data=f'{product_id}')
            rem_day.append([rem_day_button])
        if item[2] == '1':
            rem_day_button = InlineKeyboardButton(text=f"–£–±—Ä–∞—Ç—å –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –∞—Ä–µ–Ω–¥—É '{item[0]}'", callback_data=f'{product_id}')
            rem_day.append([rem_day_button])
    remove_markup = InlineKeyboardMarkup(resize_keyboard=True, inline_keyboard=rem_day)

    await bot.send_message(message.chat.id, "–ß—Ç–æ —É–±—Ä–∞—Ç—å?", reply_markup=remove_markup)
    await state.set_state(Shop.delete)


@dp.message(F.text == "üü¢ –û—Ñ–æ—Ä–º–∏—Ç—å", IsNotBanned())
async def register_order(message: types.Message, state: FSMContext) -> None:
    data = (await get_data(message.from_user.id))
    if data == False:
        await bot.send_message(message.from_user.id, "üìõ –û—à–∏–±–∫–∞! üìõ\n–ö–∞–∂–µ—Ç—Å—è, –±–æ—Ç –ø–æ—Ç–µ—Ä—è–ª –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ. –î–ª—è –∏—Ö –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ '/start'")
        await state.clear()
        return
    if not (await not_limit(message.from_user.id, 'order')):
        await bot.send_message(message.from_user.id, "‚ùå –û—à–∏–±–∫–∞, –≤—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–∫–∞–∑–æ–≤ –≤ –¥–µ–Ω—å!", reply_markup=(await main_menu_f(message)))
        return
    available = await is_available(data)
    if available != True:
        await bot.send_message(message.chat.id,
                               f"‚ùå –û—à–∏–±–∫–∞, '{available}' –±–æ–ª—å—à–µ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏, –ª–∏–±–æ —Ç–∞–∫–æ–≥–æ –∫–æ–ª-–≤–∞ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏! ‚ùå",
                               reply_markup=basket_markup)
        return
    if (await is_only_online(data)):
        await bot.send_message(message.chat.id, "üåê –£ –≤–∞—Å –∫–æ—Ä–∑–∏–Ω–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã. –ò—Ö –≤–∞–º –≤—ã–¥–∞–¥—É—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ.", reply_markup=cancel_markup)
        await add_order(data, "2", message.from_user.username)
        await bot.send_message(message.from_user.id, "‚ùó –î–ª—è —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–∞ –æ–ø–ª–∞—Ç–∞ —Ç–æ–ª—å–∫–æ –∫–∞—Ä—Ç–æ–π")
        await card(message, state)
        return 0
    delivery = (await get_setting('delivery'))
    pickup = (await get_setting('pickup'))
    if delivery == '1' and pickup == '1':
        await state.set_state(Shop.pickup_method)
        await bot.send_message(message.chat.id, "üéØ –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞", reply_markup=pick_method_markup)
    elif delivery == '1' and pickup == '0':
        await bot.send_message(message.from_user.id, "‚ùó –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç–∞–≤–∫–∞!")
        await delivery_method(message, state)
    elif delivery == '0' and pickup == '1':
        await bot.send_message(message.from_user.id, "‚ùó –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ —Å–∞–º–æ–≤—ã–≤–æ–∑!")
        await pickup_method(message, state)
    else:
        await bot.send_message(message.from_user.id,
                               "‚ùå –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –º–∞–≥–∞–∑–∏–Ω –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.\n"
                               "–ü—Ä–æ—Å–∏–º –ø—Ä–æ—â–µ–Ω–∏—è –∑–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞ –∏ –Ω–∞–¥–µ–µ–º—Å—è –Ω–∞ –≤–∞—à–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ ‚ù§Ô∏è",
                               reply_markup=(await main_menu_f(message)))
        await state.clear()


@dp.message(F.text == "üö∂üèª –°–∞–º–æ–≤—ã–≤–æ–∑", Shop.pickup_method)
async def pickup_method(message: types.Message, state: FSMContext) -> None:
    data = (await get_data(message.from_user.id))
    if data == False:
        await bot.send_message(message.from_user.id, "üìõ –û—à–∏–±–∫–∞! üìõ\n–ö–∞–∂–µ—Ç—Å—è, –±–æ—Ç –ø–æ—Ç–µ—Ä—è–ª –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ. –î–ª—è –∏—Ö –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ '/start'")
        await state.clear()
        return
    pickup_address = (await get_setting("pickup_address"))
    await bot.send_message(message.chat.id, f"üó∫ –°–∞–º–æ–≤—ã–≤–æ–∑ —Å –∞–¥—Ä–µ—Å–∞:\n{pickup_address}<b></b>", parse_mode="html", reply_markup=buy_markup)
    await state.set_state(Shop.pay)
    await add_order(data, "0", message.from_user.username)


@dp.message(F.text == "üöó –î–æ—Å—Ç–∞–≤–∫–∞", Shop.pickup_method)
async def delivery_method(message: types.Message, state: FSMContext) -> None:
    await bot.send_message(message.chat.id, "‚ùó –î–æ—Å—Ç–∞–≤–∫–∞ –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ\n\n–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Ç–º–µ–Ω–∞':", reply_markup=cancel_markup, parse_mode="html")
    await state.set_state(Address.address)


@dp.message(F.text == "üí∞ –û–ø–ª–∞—Ç–∏—Ç—å" or F.text == "üñå –ò–∑–º–µ–Ω–∏—Ç—å –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã", Shop.pay)
async def to_pay(message: types.Message, state: FSMContext) -> None:
    pay_cash = (await get_setting("pay_cash"))
    pay_card = (await get_setting("pay_card"))
    if pay_cash == '1' and pay_card == '1':
        await bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=pay_method)
        await state.set_state(Shop.payment)
    else:
        if pay_cash == '1':
            await bot.send_message(message.from_user.id, "‚ùó –î–æ—Å—Ç—É–ø–Ω–∞ –æ–ø–ª–∞—Ç–∞ —Ç–æ–ª—å–∫–æ –Ω–∞–ª–∏—á–Ω—ã–º–∏",
                                   reply_markup=basket_markup)
            await cash(message, state)
        if pay_card == '1':
            await bot.send_message(message.from_user.id, "‚ùó –î–æ—Å—Ç—É–ø–Ω–∞ –æ–ø–ª–∞—Ç–∞ —Ç–æ–ª—å–∫–æ –∫–∞—Ä—Ç–æ–π",
                                   reply_markup=basket_markup)
            await card(message, state)


@dp.message(F.text == "üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞", Shop.payment)
async def card(message: types.Message, state: FSMContext) -> None:
    data = (await get_data(message.from_user.id))
    if data == False:
        await bot.send_message(message.from_user.id, "üìõ –û—à–∏–±–∫–∞! üìõ\n–ö–∞–∂–µ—Ç—Å—è, –±–æ—Ç –ø–æ—Ç–µ—Ä—è–ª –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ. –î–ª—è –∏—Ö –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ '/start'")
        await state.clear()
        return
    available = await is_available(data)
    if available != True:
        await bot.send_message(message.chat.id,
                               f"‚ùå –û—à–∏–±–∫–∞, '{available}' –±–æ–ª—å—à–µ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏, –ª–∏–±–æ —Ç–∞–∫–æ–≥–æ –∫–æ–ª-–≤–∞ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏! ‚ùå",
                               reply_markup=basket_markup)
        return
    await bot.send_message(message.chat.id, "‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –æ–ø–ª–∞—Ç—É –∫–∞—Ä—Ç–æ–π")
    title =""
    for i in data[2]:
        title+=f"–¢–æ–≤–∞—Ä:'{i[0]}', –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {i[1]}\n"
    await bot.send_invoice(
        chat_id=message.chat.id,
        title="–ü–æ–∫—É–ø–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤",
        description=title,
        provider_token=PAYMENT_TOKEN,
        currency='rub',
        is_flexible=False,
        prices=[LabeledPrice(label='–û–±—â–∞—è —Å—É–º–º–∞:', amount=data[5]*100)],
        start_parameter='time-machine-example',
        payload=str(data[0])
    )
    await state.update_data(id=data[0])
    await state.set_state(None)


@dp.message(F.text == "üíµ –ù–∞–ª–∏—á–Ω—ã–º–∏", Shop.payment)
async def cash(message: types.Message, state: FSMContext) -> None:
    await bot.send_message(message.chat.id, "‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –æ–ø–ª–∞—Ç—É –Ω–∞–ª–∏—á–Ω—ã–º–∏", reply_markup=cash_markup)
    await add_pay_method("0", message.from_user.id)
    await state.set_state(Shop.finish)


@dp.message(F.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", Shop.finish)
async def finish(message: types.Message, state: FSMContext) -> None:
    await bot.send_message(message.chat.id, "‚ùáÔ∏è –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç, —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –ø—Ä–æ–¥–∞–≤–µ—Ü", reply_markup=(await main_menu_f(message.from_user.id)))
    order_info = await get_order(message.from_user.id)
    if order_info[10] == '0':
        data = (await get_data(message.from_user.id))
        if data == False:
            await bot.send_message(message.from_user.id,
                                   "üìõ –û—à–∏–±–∫–∞! üìõ\n–ö–∞–∂–µ—Ç—Å—è, –±–æ—Ç –ø–æ—Ç–µ—Ä—è–ª –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ. –î–ª—è –∏—Ö –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ '/start'")
            await state.clear()
            return
        available = await is_available(data)
        if available != True:
            await bot.send_message(message.chat.id,
                                   f"‚ùå –û—à–∏–±–∫–∞, '{available}' –±–æ–ª—å—à–µ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏, –ª–∏–±–æ —Ç–∞–∫–æ–≥–æ –∫–æ–ª-–≤–∞ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏! ‚ùå",
                                   reply_markup=basket_markup)
            return
        await change_available(data)
    await send_order(message.from_user.id)
    await clear_data(message.from_user.id)
    await state.clear()


@dp.message(F.text == "‚úâÔ∏è –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", IsNotBanned())
async def suggestion(message: types.Message, state: FSMContext) -> None:
    if not (await not_limit(message.from_user.id, 'suggestion')):
        await bot.send_message(message.from_user.id, "‚ùå –û—à–∏–±–∫–∞, –≤—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç –∫–æ–ª-–≤–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –≤ –¥–µ–Ω—å!", reply_markup=(await main_menu_f(message)))
        return
    await state.set_state(Suggestion.suggestion)
    await bot.send_message(message.chat.id, "‚å®Ô∏è –í–≤–µ–¥–∏—Ç–µ —Ç–æ, —á—Ç–æ –≤—ã –±—ã —Ö–æ—Ç–µ–ª–∏ –≤–∏–¥–µ—Ç—å —É –Ω–∞—Å –≤ —Å–µ—Ä–≤–∏—Å–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Ç–º–µ–Ω–∞'", reply_markup=cancel_markup)
    

@dp.message(Address.address, IsNotCancel())
async def load_address(message: types.Message, state: FSMContext) -> None:
    data = (await get_data(message.from_user.id))
    if data == False:
        await bot.send_message(message.from_user.id, "üìõ –û—à–∏–±–∫–∞! üìõ\n–ö–∞–∂–µ—Ç—Å—è, –±–æ—Ç –ø–æ—Ç–µ—Ä—è–ª –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ. –î–ª—è –∏—Ö –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ '/start'")
        await state.clear()
        return
    await bot.send_message(message.chat.id, "‚úÖ –ê–¥—Ä–µ—Å –∑–∞–ø–∏—Å–∞–Ω", reply_markup=buy_markup)
    await add_order(data, "1", message.from_user.username, message.text)
    await state.set_state(Shop.pay)


@dp.message(Suggestion.suggestion, IsNotCancel())
async def load_answer(message: types.Message, state: FSMContext) -> None:
    suggestion = message.text
    await bot.send_message(message.chat.id, "üì§ –°–ø–∞—Å–∏–±–æ, –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ", reply_markup=(await main_menu_f(message)))
    await send_suggestion(suggestion, message.from_user.username, message.from_user.id)
    await state.clear()


@dp.message(Ask.question, IsNotCancel())
async def load_suggestion(message: types.Message, state: FSMContext) -> None:
    question = message.text
    await bot.send_message(message.chat.id, "‚ú≥Ô∏è –í–∞—à –≤–æ–ø—Ä–æ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø—Ä–æ–¥–∞–≤—Ü—É", reply_markup=(await main_menu_f(message)))
    await send_question(question, message.from_user.username, message.from_user.id)
    await state.clear()


@dp.callback_query(Shop.delete, IsNotBanned())
async def delete_product(callback: types.CallbackQuery, state: FSMContext) -> None:
    data = (await get_data(callback.from_user.id))
    product_name = (await get_product_name(int(callback.data)))
    if data == False:
        await bot.send_message(callback.from_user.id, "üìõ –û—à–∏–±–∫–∞! üìõ\n–ö–∞–∂–µ—Ç—Å—è, –±–æ—Ç –ø–æ—Ç–µ—Ä—è–ª –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ. –î–ª—è –∏—Ö –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ '/start'")
        await state.clear()
        return
    data_mod = data
    for i in range(len(data[2])):
        if data[2][i][0] == product_name:
            data_mod[2].pop(i)
            await bot.send_message(callback.from_user.id, f"‚úîÔ∏è '{product_name}' –±—ã–ª —É–¥–∞–ª—ë–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã", reply_markup=basket_markup)
            await update_price(data_mod)
            await state.clear()
            return
    await bot.send_message(callback.from_user.id, "‚ùå –í –≤–∞—à–µ–π –∫–æ—Ä–∑–∏–Ω–µ –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ —Ç–æ–≤–∞—Ä–∞!")
    await state.clear()


@dp.callback_query(Shop.choose, IsNotBanned(), lambda c: c.data != "load_more")
async def buy_or_arend(callback: types.CallbackQuery, state: FSMContext) -> None:
    data = (await get_data(callback.from_user.id))
    product_name = (await get_product_name(int(callback.data)))
    if data == False:
        await bot.send_message(callback.from_user.id,
                               "üìõ –û—à–∏–±–∫–∞! üìõ\n–ö–∞–∂–µ—Ç—Å—è, –±–æ—Ç –ø–æ—Ç–µ—Ä—è–ª –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ. –î–ª—è –∏—Ö –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ '/start'")
        await state.clear()
        return
    limit = int((await get_setting("choices_limit")))
    if len(data[2]) >= limit:
        await bot.send_message(callback.from_user.id, "‚ùå –û—à–∏–±–∫–∞! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ", reply_markup=(await main_menu_f(callback)))
        return
    info = await get_info(product_name)
    await state.update_data(product_name=product_name)
    if info[1] != 0 and info[2] != 0:
        await state.set_state(Shop.buy_or_arend)
        await bot.send_message(callback.from_user.id, '‚ùó –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:', reply_markup=buy_or_arend_markup)
    else:
        if info[1] != 0:
            await state.update_data(type=0)
            await bot.send_message(callback.from_user.id, '‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å')
        elif info[2] != 0:
            await state.update_data(type=1)
            await bot.send_message(callback.from_user.id, '‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä')
        if info[4] == 1:
            await state.update_data(type=2)
        await state.set_state(Shop.count)


@dp.callback_query(Shop.buy_or_arend, IsNotBanned())
async def counts(callback: types.CallbackQuery, state: FSMContext) -> None:
    if callback.data == "add_buy":
        await state.update_data(type=0)
        await bot.send_message(callback.from_user.id, '‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å')
    elif callback.data == 'add_arend':
        await state.update_data(type=1)
        await bot.send_message(callback.from_user.id, '‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä')
    await state.set_state(Shop.count)


@dp.message(Shop.count)
async def add_product(message: types.Message, state: FSMContext) -> None:
    if message.text.isdigit():
        if int(message.text) > 0:
            data = (await get_data(message.from_user.id))
            if data == False:
                await bot.send_message(message.from_user.id,
                                       "üìõ –û—à–∏–±–∫–∞! üìõ\n–ö–∞–∂–µ—Ç—Å—è, –±–æ—Ç –ø–æ—Ç–µ—Ä—è–ª –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ. –î–ª—è –∏—Ö –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ '/start'")
                await state.clear()
                return
            data_product = await state.get_data()
            data = await product_to_data(data, data_product['product_name'], int(message.text), data_product['type'])
            if data == False:
                await bot.send_message(message.from_user.id, "‚ùå –û—à–∏–±–∫–∞! –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ç–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ!", reply_markup=(await main_menu_f(message)))
                return
            await update_data(data)
            await update_price(data)
            await bot.send_message(message.from_user.id, "üü¢ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!", reply_markup=(await main_menu_f(message)))
        else:
            await bot.send_message(message.from_user.id,
                                   f'‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ {message.text}. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É –∑–∞–Ω–æ–≥–æ.',
                                   reply_markup=(await main_menu_f(message)))
    else:
        await bot.send_message(message.from_user.id, '‚ùå –ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ! –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É –∑–∞–Ω–æ–≥–æ.', reply_markup=(await main_menu_f(message)))


@dp.callback_query(lambda c: c.data)
async def load_more(callback: types.CallbackQuery, state: FSMContext) -> None:
    limit = int((await get_setting("limit_displayed_products")))
    data = (await get_data(callback.from_user.id))
    if data == False:
        await bot.send_message(callback.from_user.id, "üìõ –û—à–∏–±–∫–∞! üìõ\n–ö–∞–∂–µ—Ç—Å—è, –±–æ—Ç –ø–æ—Ç–µ—Ä—è–ª –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ. –î–ª—è –∏—Ö –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ '/start'")
        await state.clear()
        return
    if callback.data == "load_more":
        await print_products(callback.from_user.id, data[6], limit, data[1])
        data[6] += limit
        data[1] += limit

    await update_data(data)

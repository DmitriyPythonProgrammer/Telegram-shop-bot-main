import datetime
from aiogram.enums import ContentType
from aiogram.filters import Command
from ports.db import *
from Domain.order_functions import new_admin, send_order
from aiogram import types, F
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, Message
from .states import *
from aiogram.fsm.context import FSMContext
from Domain.functions import change_available, is_number, is_photo
from ..markups import cancel_markup, admin_markup_f, add_group_markup, main_menu_f, sub_res_markup, admin_list_markup
from ..create_bot import bot, dp
from Framework.Filters import IsAdmin, IsNotCancel, IsFirstAdmin, IsGroup


@dp.pre_checkout_query()
async def process_pre_checkout_query(pre_checkout_query: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)


@dp.message(F.content_type == ContentType.SUCCESSFUL_PAYMENT)
async def process_successful_payment(message: types.Message, state: FSMContext):
    await bot.send_message(message.chat.id,
        f"‚úÖ –û–ø–ª–∞—Ç–∞ {message.successful_payment.total_amount / 100} {message.successful_payment.currency} —É—Å–ø–µ—à–Ω–∞!")
    id = int(message.successful_payment.invoice_payload)
    data = (await get_data(id))
    await change_available(data)
    await add_pay_method("1", id)
    await bot.send_message(message.chat.id, "‚ùáÔ∏è –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç, —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –ø—Ä–æ–¥–∞–≤–µ—Ü",
                           reply_markup=(await main_menu_f(message.from_user.id)))
    await send_order(message.from_user.id)
    await clear_data(message.from_user.id)
    await state.clear()


@dp.message(IsGroup())
async def group(message: types.Message):
    if message.text == "/start":
        await bot.send_message(message.chat.id, "‚ùó –í–Ω–∏–º–∞–Ω–∏–µ! –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –Ω–∏–º.")
    if message.text == "/add":
        await bot.send_message(message.chat.id, "‚ùó –í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫—É—é —Ä–æ–ª—å –±—É–¥–µ—Ç –∏–≥—Ä–∞—Ç—å —ç—Ç–æ—Ç —á–∞—Ç:", reply_markup=add_group_markup)


@dp.callback_query(IsGroup(), lambda callback: "orders_group" in callback.data)
async def orders_group(callback: types.CallbackQuery):
    await bot.send_message(callback.message.chat.id, "‚ùó –î–∞–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∞ —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –ø—Ä–∏—ë–º–∞ –∑–∞–∫–∞–∑–æ–≤.")
    await update_setting("orders_group", str(callback.message.chat.id))


@dp.callback_query(IsGroup(), lambda callback: "questions_group" in callback.data)
async def orders_group(callback: types.CallbackQuery):
    await bot.send_message(callback.message.chat.id, "‚ùó –î–∞–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∞ —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –ø—Ä–∏—ë–º–∞ –≤–æ–ø—Ä–æ—Å–æ–≤.")
    await update_setting("questions_group", str(callback.message.chat.id))


@dp.callback_query(IsGroup(), lambda callback: "suggestions_group" in callback.data)
async def orders_group(callback: types.CallbackQuery):
    await bot.send_message(callback.message.chat.id, "‚ùó –î–∞–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∞ —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –ø—Ä–∏—ë–º–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.")
    await update_setting("suggestions_group", str(callback.message.chat.id))


@dp.callback_query(IsGroup())
async def get_order_admin(callback: types.CallbackQuery):
     order_info = (await get_order_by_id(int(callback.data)))
     await bot.send_message(callback.message.chat.id, f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {callback.from_user.username} –≤–∑—è–ª –∑–∞–∫–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {order_info[0]} –æ—Ç {order_info[1]} —á–∏—Å–ª–∞!")
     await bot.edit_message_reply_markup(callback.message.chat.id, callback.message.message_id)


@dp.message(Command('stop'), IsFirstAdmin())
async def stop(message: Message):
    await dp.stop_polling()


@dp.message(F.text == "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", IsAdmin())
async def statistic(message: Message):
    all_users = (await return_all_users())
    user_registers_day = 0
    user_registers_week = 0
    user_registers_month = 0
    today_date = datetime.date.today()
    for i in all_users:
        date_datetime = datetime.datetime.strptime(i[3], "%Y-%m-%d").date()
        if date_datetime == today_date:
            user_registers_day += 1
        if (today_date - date_datetime).days <= 7:
            user_registers_week += 1
        if (today_date - date_datetime).days <= 30:
            user_registers_month += 1
    all_orders = (await return_all_orders())
    order_registers_day = 0
    order_registers_week = 0
    order_registers_month = 0
    for i in all_orders:
        date_datetime = datetime.datetime.strptime(i[11], "%Y-%m-%d").date()
        if date_datetime == today_date:
            order_registers_day += 1
        if (today_date - date_datetime).days <= 7:
            order_registers_week += 1
        if (today_date - date_datetime).days <= 30:
            order_registers_month += 1
    count_users = len(all_users)
    count_orders = len(all_orders)
    count_bans = len((await return_all_bans()))
    count_admins = len((await return_admins()))
    await bot.send_message(message.from_user.id, f"üë®üèª‚Äçüíª –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üë®üèª‚Äçüíª\n\n"
                                                 f"–ó–∞ –¥–µ–Ω—å:\n"
                                                 f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_registers_day}\n"
                                                 f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {order_registers_day}\n\n"
                                                 f"–ó–∞ –Ω–µ–¥–µ–ª—é:\n"
                                                 f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_registers_week}\n"
                                                 f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {order_registers_week}\n\n"
                                                 f"–ó–∞ –º–µ—Å—è—Ü:\n"
                                                 f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_registers_month}\n"
                                                 f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {order_registers_month}\n\n"
                                                 f"–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:"
                                                 f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {count_users}\n"
                                                 f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: {count_orders}\n"
                                                 f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö: {count_bans}\n"
                                                 f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –±–æ—Ç–∞: {count_admins}", reply_markup=admin_markup_f(message))


@dp.message(F.text == 'üíÄ –ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', IsAdmin())
async def ban(message: Message, state: FSMContext):
    await bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤, —Å —Å–∏–º–≤–æ–ª–æ–º @ –ª–∏–±–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Ç–º–µ–Ω–∞'.\n–ü—Ä–∏–º–µ—Ä: @Pr1zrak0", reply_markup=cancel_markup)
    await state.set_state(ManageUser.ban_user)


@dp.message(F.text == 'üëº –†–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', IsAdmin())
async def unban(message: Message, state: FSMContext):
    await bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤, —Å —Å–∏–º–≤–æ–ª–æ–º @ –ª–∏–±–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Ç–º–µ–Ω–∞'.\n–ü—Ä–∏–º–µ—Ä: @Pr1zrak0", reply_markup=cancel_markup)
    await state.set_state(ManageUser.unban_user)


@dp.message(F.text == "üìü –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", IsAdmin())
async def admin_panel(message: types.Message, state: FSMContext):
    await state.clear()
    await bot.send_message(message.from_user.id, "üìü –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=admin_markup_f(message))


@dp.message(F.text, lambda message: "/admin" in message.text)
async def admin_reg(message: types.Message):
    ADMIN_TOKEN = (await get_setting("admin_token"))
    if f"/admin {ADMIN_TOKEN}" in message.text:
        is_admin = IsAdmin()
        if not (await is_admin(query_or_message=message)):
            await add_admin(message.from_user.id, message.from_user.username)
            await bot.send_message(message.from_user.id, "üìü –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=admin_markup_f(message))
            await new_admin(message)
            await message.delete()
        else:
            await bot.send_message(message.from_user.id, "‚ùó –í—ã —É–∂–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! ‚ùó", reply_markup=admin_markup_f(message))
            await message.delete()


@dp.message(F.text == '‚ö°Ô∏è –í–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ —É—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è', IsAdmin())
async def information(message: Message):
    await bot.send_message(message.chat.id, "‚ö° –í–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ —É—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è ‚ö°\n"
                                            "–ö–æ—Ä–∑–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥—Ä—É–≥–∏–µ –¥–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏, "
                                            "–ø–æ—ç—Ç–æ–º—É –±–æ—Ç —Å–ª–µ–¥—É–µ—Ç –∏–Ω–æ–≥–¥–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞—Ç—å."
                                            " –ü–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ—Ä–∑–∏–Ω–∞ —Å–±—Ä–æ—Å–∏—Ç—Å—è.\n\n"
                                            "–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ —è–≤–Ω—ã—Ö –æ—à–∏–±–æ–∫, –ì–ª. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –∞–π–¥–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ –∑–∞–ø–∏—Å–∞–Ω –≤ –±–æ—Ç–µ, –¥–æ–ª–∂–µ–Ω"
                                            " –æ—Ç–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /stop –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ–± –æ—à–∏–±–∫–µ —Å–æ–∑–¥–∞—Ç–µ–ª—é - @Pr1zrak0.\n\n"
                                            "–ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –±–æ—Ç–∞ –Ω–µ –Ω–µ—Å—ë—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ —É–±—ã—Ç–∫–∏, –ø–æ—Ç–µ—Ä—é –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é,"
                                            "–ø–æ–ª—É—á–µ–Ω–Ω—É—é –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–æ—Ç–æ–º."
                                            "–¢–∞–∫–∂–µ –∑–∞ –ª—é–±—ã–µ –ø—Ä–æ—Ç–∏–≤–æ–∑–∞–∫–æ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –±–æ—Ç–æ–º, –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –Ω–µ—Å—ë—Ç —Ç–æ—Ç, –∫—Ç–æ –ø—Ä–∏–æ–±—Ä—ë–ª –±–æ—Ç–∞.")


@dp.message(F.text == "üé≤ –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä", IsAdmin())
async def adm_start(message: types.Message, state: FSMContext):
    await state.set_state(AddGame.name)
    await bot.send_message(message.chat.id, "üìñ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Ç–º–µ–Ω–∞' –¥–ª—è –≤—ã—Ö–æ–¥–∞.", reply_markup=cancel_markup)


@dp.message(AddGame.name, IsAdmin(), IsNotCancel())
async def load_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(AddGame.online_product)
    await bot.send_message(message.chat.id, "üåê –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä —Ü–∏—Ñ—Ä–æ–≤—ã–º? 1 - –¥–∞, 0 - –Ω–µ—Ç, '–û—Ç–º–µ–Ω–∞' –¥–ª—è –≤—ã—Ö–æ–¥–∞. –î–ª—è —Ç–∞–∫–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞ –∏ —Å–∞–º–æ–≤—ã–≤–æ–∑,"
                                            " –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —Å–∞–º–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç —Ç–æ–≤–∞—Ä –∫–ª–∏–µ–Ω—Ç—É –ø–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É. (–ü—Ä–∏–º–µ—Ä: –∫–æ–¥, –ø–æ–∫—É–ø–∫–∞ –∏–≥—Ä–æ–≤–æ–π –≤–∞–ª—é—Ç—ã)", reply_markup=cancel_markup)


@dp.message(AddGame.online_product, IsAdmin(), IsNotCancel())
async def load_name(message: types.Message, state: FSMContext):
    if not(message.text == '0' or message.text == '1'):
        await bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏—Ç–µ –ª–∏–±–æ 1, –ª–∏–±–æ 0. 1- –¥–∞, 0 - –Ω–µ—Ç.")
        await state.set_state(AddGame.online_product)
        return 0
    await state.update_data(online_product=message.text)
    await state.set_state(AddGame.price)
    await bot.send_message(message.chat.id, "üí∏ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –ø–æ–∫—É–ø–∫–∏. 0 - —Ç–æ–≤–∞—Ä –Ω–µ –ø—Ä–æ–¥–∞—ë—Ç—Å—è. '–û—Ç–º–µ–Ω–∞' –¥–ª—è –≤—ã—Ö–æ–¥–∞.", reply_markup=cancel_markup)


@dp.message(AddGame.price, IsAdmin(), IsNotCancel())
async def load_name(message: types.Message, state: FSMContext):
    if not (await is_number(message)):
        await state.set_state(AddGame.price)
        return 0

    if int(message.text)<0:
        await bot.send_message(message.chat.id, "‚ùå –ù–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 0! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞'",
                               reply_markup=cancel_markup)
        await state.set_state(AddGame.price)
        return 0

    await state.update_data(price=message.text)
    await state.set_state(AddGame.price_day)
    await bot.send_message(message.chat.id, "üí∏ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∞—Ä–µ–Ω–¥—ã –∑–∞ —Å—É—Ç–∫–∏. 0 - —Ç–æ–≤–∞—Ä –Ω–µ –∞—Ä–µ–Ω–¥—É–µ—Ç—Å—è. '–û—Ç–º–µ–Ω–∞' –¥–ª—è –≤—ã—Ö–æ–¥–∞.", reply_markup=cancel_markup)


@dp.message(AddGame.price_day, IsAdmin(), IsNotCancel())
async def load_price_day(message: types.Message, state: FSMContext):

    if not (await is_number(message)):
        await state.set_state(AddGame.price_day)
        return 0

    if int(message.text) < 0:
        await bot.send_message(message.chat.id, "‚ùå –ù–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 0! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞'",
                               reply_markup=cancel_markup)
        await state.set_state(AddGame.price_day)
        return 0
    await state.update_data(day_price=message.text)
    if message.text != '0':
        await state.set_state(AddGame.deposit)
        await bot.send_message(message.chat.id, "üí∞ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∑–∞–ª–æ–≥–∞. 0 - —Ç–æ–≤–∞—Ä –Ω–µ –∞—Ä–µ–Ω–¥—É–µ—Ç—Å—è. '–û—Ç–º–µ–Ω–∞' –¥–ª—è –≤—ã—Ö–æ–¥–∞.", reply_markup=cancel_markup)
    else:
        await state.update_data(deposit='0')
        await state.set_state(AddGame.photo)
        await bot.send_message(message.chat.id, "üèû –¢–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Ç–º–µ–Ω–∞' –¥–ª—è –≤—ã—Ö–æ–¥–∞.", reply_markup=cancel_markup)


@dp.message(AddGame.deposit, IsAdmin(), IsNotCancel())
async def load_deposit(message: types.Message, state: FSMContext):

    if not (await is_number(message)):
        await state.set_state(AddGame.deposit)
        return 0

    if int(message.text) < 0:
        await bot.send_message(message.chat.id, "‚ùå –ù–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 0! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞'",
                               reply_markup=cancel_markup)
        await state.set_state(AddGame.deposit)
        return 0

    await state.update_data(deposit=message.text)
    await state.set_state(AddGame.photo)
    await bot.send_message(message.chat.id, "üèû –¢–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Ç–º–µ–Ω–∞' –¥–ª—è –≤—ã—Ö–æ–¥–∞.", reply_markup=cancel_markup)


@dp.message(AddGame.photo,  IsAdmin(), IsNotCancel())
async def load_photo(message: types.Message, state: FSMContext):
    if not (await is_photo(message)):
        await bot.send_message(message.chat.id, "‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞'", reply_markup=cancel_markup)
        await state.set_state(AddGame.photo)
        return 0
    await state.update_data(photo=message.photo[0].file_id)
    data = await state.get_data()
    await bot.send_message(message.chat.id, "üìã –í–≤–µ–¥–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:", reply_markup=sub_res_markup)
    await bot.send_message(message.chat.id, f"–ù–∞–∑–≤–∞–Ω–∏–µ: {data['name']}\n–¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏: {data['price']}\n–¶–µ–Ω–∞ –∑–∞ –¥–µ–Ω—å: {data['day_price']}\n–ó–∞–ª–æ–≥: {data['deposit']}")
    await state.set_state(AddGame.finish)


@dp.message(F.text == "‚úÖ –î–æ–±–∞–≤–∏—Ç—å", IsAdmin(), AddGame.finish)
async def add_games(message: types.Message, state: FSMContext):
    data = await state.get_data()
    await add_product(data['name'], data['day_price'], data['deposit'], data['photo'], data['price'], data['online_product'])
    await bot.send_message(message.chat.id, "üü¢ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö", reply_markup=admin_markup_f(message))
    await state.clear()


@dp.message(F.text == "üóØ –°–±—Ä–æ—Å–∏—Ç—å", IsAdmin())
async def reset_info(message: types.Message, state: FSMContext):
    await bot.send_message(message.chat.id, "üìÇ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω—ã", reply_markup=admin_markup_f(message))
    await state.clear()


@dp.message(F.text == "üí• –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä", IsAdmin())
async def delete_game(message: types.Message, state: FSMContext):
    products_list = []
    products = (await get_products_id_name())
    if products:
        for i in products:
            products_list.append([InlineKeyboardButton(text=i[0], callback_data=f'{i[1]}')])
        products_markup = InlineKeyboardMarkup(resize_keyboard=True, inline_keyboard=products_list)
        await bot.send_message(message.chat.id, "‚å®Ô∏è –í—ã–±–µ—Ä–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å", reply_markup=products_markup)
        await state.set_state(ChangeGame.delete)
    else:
        await bot.send_message(message.chat.id, "üî¥ –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã!", reply_markup=admin_markup_f(message))


@dp.message(F.text == "üì™ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å '–≤ –Ω–∞–ª–∏—á–∏–∏'", IsAdmin())
async def set_av_name(message: types.Message, state: FSMContext):
    products_list = []
    products = (await get_products_id_name())
    if products:
        for i in products:
            products_list.append([InlineKeyboardButton(text=i[0], callback_data=f'{i[1]}')])
        products_markup = InlineKeyboardMarkup(resize_keyboard=True, inline_keyboard=products_list)
        await bot.send_message(message.chat.id, "üè∑ –í—ã–±–µ—Ä–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å '–≤ –Ω–∞–ª–∏—á–∏–∏'", reply_markup=products_markup)
        await state.set_state(ChangeGame.change_count)
    else:
        await bot.send_message(message.chat.id, "üî¥ –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã!", reply_markup=admin_markup_f(message))


@dp.message(F.text == '‚ò†Ô∏è –†–∞–∑–∂–∞–ª–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', IsFirstAdmin(), IsAdmin())
async def del_admin_menu(message: Message, state: FSMContext):
    await bot.send_message(message.chat.id, "–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –µ–≥–æ –Ω–∏–∫ –∏–∑ —Å–ø–∏—Å–∫–∞: ", reply_markup=(await admin_list_markup()))
    await state.set_state(DeleteAdmin.delete_admin)


@dp.message(F.text, DeleteAdmin.delete_admin, IsNotCancel(), IsFirstAdmin(), IsAdmin())
async def del_admin(message: Message, state: FSMContext):
    if message.text in (await return_admins_usernames()):
        await delete_admin(message.text)
        await bot.send_message(message.chat.id, f"‚úîÔ∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {message.text} –±—ã–ª —É–¥–∞–ª—ë–Ω.", reply_markup=admin_markup_f(message))
    else:
        await bot.send_message(message.chat.id, f"‚ùåÔ∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –¥–∞–Ω–Ω—ã–º –Ω–∏–∫–æ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚ùå", reply_markup=admin_markup_f(message))
    await state.clear()


@dp.message(ManageUser.ban_user, IsAdmin(), IsNotCancel())
async def ban_user(message: Message, state: FSMContext):
    if message.text.count(' ') != 0 or message.text.count('@') != 1:
        await bot.send_message(message.from_user.id, "‚ùå –û—à–∏–±–∫–∞! –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥—ë–Ω —é–∑–µ—Ä–Ω–µ–π–º", reply_markup=admin_markup_f(message))
        return 0
    username = message.text[1:]
    id = (await get_user_id(username))
    admins_id = (await return_admins())
    if id in admins_id:
        await bot.send_message(message.from_user.id, "‚ùå –û—à–∏–±–∫–∞! –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–±–∞–Ω–∏—Ç—å –¥—Ä—É–≥–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n–ß—Ç–æ–±—ã —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å, –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω —Å–Ω–∞—á–∞–ª–∞ —Ä–∞–∑–∂–∞–ª–æ–≤–∞—Ç—å –µ–≥–æ.", reply_markup=admin_markup_f(message))
        return 0
    if (await is_banned(id)):
        await bot.send_message(message.from_user.id, "‚ùå –û—à–∏–±–∫–∞! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞–±–∞–Ω–µ–Ω!", reply_markup=admin_markup_f(message))
        return 0
    await bot.send_message(message.from_user.id, f"‚úîÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{username}' –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–±–∞–Ω–µ–Ω.", reply_markup=admin_markup_f(message))
    await add_ban(username, id)
    await state.set_state(None)


@dp.message(ManageUser.unban_user, IsAdmin(), IsNotCancel())
async def unban_user(message: Message):
    if message.text.count(' ') != 0 or message.text.count('@') != 1:
        await bot.send_message(message.from_user.id, "‚ùå –û—à–∏–±–∫–∞! –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥—ë–Ω —é–∑–µ—Ä–Ω–µ–π–º", reply_markup=admin_markup_f(message))
        return 0
    username = message.text[1:]
    if not (await is_banned(username)):
        await bot.send_message(message.from_user.id, "‚ùå –û—à–∏–±–∫–∞! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–±–∞–Ω–µ–Ω!", reply_markup=admin_markup_f(message))
        return 0
    await bot.send_message(message.from_user.id, f"‚úîÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{username}' –±—ã–ª —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–∞–Ω–µ–Ω.", reply_markup=admin_markup_f(message))
    await un_ban(username)


@dp.message(IsAdmin(), ChangeGame.count, lambda message: message.text.isdigit(), IsNotCancel())
async def set_av(message: types.Message, state: FSMContext):
    if not (await is_number(message)):
        await state.set_state(AddGame.photo)
        return 0
    data = await state.get_data()
    id = (await get_product_id(data['product_name']))
    product = (await get_product(id))
    if product[9] == 0:
        only_online = (await get_setting("only_online"))
        if only_online == '1' and message.text != '0':
            await bot.send_message(message.chat.id,
                                   "‚ùå –£ –≤–∞—Å –≤–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º 'üåê –¢–æ–ª—å–∫–æ –æ–Ω–ª–∞–π–Ω –ø–æ–∫—É–ø–∫–∏'. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ –Ω–∞–ª–∏—á–∏–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤–æ–π —Ç–æ–≤–∞—Ä, –æ—Ç–∫–ª—é—á–∏—Ç–µ —ç—Ç–æ—Ç —Ä–µ–∂–∏–º. –ï—Å–ª–∏ –≤—ã –æ—à–∏–±–ª–∏—Å—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞, –µ—Å–ª–∏ –Ω–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏ –∏–∑–º–µ–Ω–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.",
                                   reply_markup=cancel_markup)
            return 0
    else:
        pay_card = (await get_setting("pay_card"))
        if pay_card == '0':
            await bot.send_message(message.chat.id,
                                   "‚ùå –≠—Ç–æ —Ü–∏—Ñ—Ä–æ–≤–æ–π —Ç–æ–≤–∞—Ä, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–ø–ª–∞—á–µ–Ω —Ç–æ–ª—å–∫–æ –∫–∞—Ä—Ç–æ–π. –£ –≤–∞—Å –æ—Ç–∫–ª—é—á–µ–Ω–∞ –æ–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π, –ø–æ—ç—Ç–æ–º—É –¥–æ–±–∞–≤–∏—Ç—å –≤ –Ω–∞–ª–∏—á–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.",
                                   reply_markup=cancel_markup)
            return 0

    if int(message.text)<0:
        await bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –º–µ–Ω—å—à–µ 0!", reply_markup=admin_markup_f(message))
        return 0
    await set_available(data['product_name'], int(message.text))
    await state.clear()
    await bot.send_message(message.chat.id, f"üéâ –¢–µ–ø–µ—Ä—å –∫–æ–ª-–≤–æ '{data['product_name']}' –≤ –Ω–∞–ª–∏—á–∏–∏: {(await return_available(data['product_name']))[0]}", reply_markup=admin_markup_f(message))


@dp.callback_query(IsAdmin(), ChangeGame.delete)
async def delete_game_db(callback: types.CallbackQuery):
    product_name = (await get_product_name(int(callback.data)))
    await callback.answer(text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ '{product_name}' ")
    await del_game(product_name)
    await bot.send_message(callback.message.chat.id, f"‚òÑÔ∏è –¢–æ–≤–∞—Ä '{product_name}' —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")


@dp.callback_query(IsAdmin(), ChangeGame.change_count)
async def set_av(callback: types.CallbackQuery, state: FSMContext):
    product_name = (await get_product_name(int(callback.data)))
    await bot.send_message(callback.from_user.id, text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ '{product_name}'.\n–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∫–æ–ª-–≤–æ –≤ –Ω–∞–ª–∏—á–∏–∏: {(await return_available(product_name))[0]}")
    await state.update_data(product_name=product_name)
    await state.set_state(ChangeGame.count)
    await bot.send_message(callback.message.chat.id, f"–ê —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –∏–ª–∏ –Ω–∞–∂–º–∏ '–û—Ç–º–µ–Ω–∞'", reply_markup=cancel_markup)
